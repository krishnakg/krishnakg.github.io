#+hugo_base_dir: ../
#+hugo_auto_set_lastmod: t
#+startup: logdone

* DONE Quickly subscribing to RSS feeds in FreshRSS :freshrss:
CLOSED: [2025-04-13 Sun 18:13]
:PROPERTIES:
:EXPORT_FILE_NAME: quickly-subscribing-to-rss-feeds
:END:

I use a selfhosted [[https://freshrss.org/index.html][FreshRSS]] instance to manage by rss feeds. I wanted a quick way to add a web page's rss feed into FreshRSS without copy pasting the URLs. So i created a bookmarklet with the following code to open the freshRSS add-feed page with the URL filled in.

#+hugo: more
#+begin_src javascript
javascript:(function(){
  var freshRssUrl = 'https://[FreshRSS_Domain_URL]/i/?c=feed&a=add&url_rss=';
  window.open(freshRssUrl + encodeURIComponent(window.location.href));
})()
#+end_src

Of course, update the URL to your FreshRSS domain accordingly in that snippet!

Another quick tip: Did you know that all Youtube channels have a rss feed? I use these rss feeds to get notifications for any new youtube videos on my favorite channels.


* DONE Getting reliable WiFi on Thinkpad T440s with Linux :linux:pop_os:
CLOSED: [2025-04-09 Wed 19:33]
:PROPERTIES:
:EXPORT_FILE_NAME: fixing-linux-wifi-issues-thinkpad-440s
:END:

While looking around at my old devices, noticed my trusty old Thinkpad 440s (bought in 2014) which had been gathering dust for a while. Hoping to get some more use out of it, I installed Pop_OS!, but noticed that wifi would get cut-off on a regular basis, and it consistently needed a reboot to get wifi working again. Here is a fun story on how I got it working.

#+hugo: more
The Thinkpad T440s from 2014 came in two flavors, one with an Intel wifi card, and the other a Realtek RTL8192EE card. Mine came with the Realtek adapter, and there are enough stories on the internet around its questionable reliability on both Windows and Linux. Further digging showed there is [[https://github.com/lwfinger/rtl8192ee][an alternate driver]] which had been maintained by Larry Finger, atleast since 2019. Larry Finger [[https://www.iucr.org/news/newsletter/volume-32/number-2/larry-w.-finger-19402024][passed away]] in 2024, which means we no longer have someone maintaining it. A quick build on the project showed it no longer builds with the latest kernels, as function signatures have changed in the newer kernels. Luckily, it was a fairly trivial fix, and the [[https://github.com/krishnakg/rtl8192ee][resulting code]] now builds fine for kernel 6.12, which is what Iam currently running. The documentation on how to install it still works well enough. There is an alternate method to install via DKMS, which I did not try.

I also noticed that the card does not wake up after it goes to sleep, so I have disabled wifi.powersave at ~/etc/NetworkManager/conf.d/default-wifi-powersave-on.conf~ with the value ~wifi.powersave = 2~. (2 disables powersave, 3 enables it.) Some more information on the value [[https://gist.github.com/jcberthon/ea8cfe278998968ba7c5a95344bc8b55][here]]. In addition, I have also disabled Intel Rapid Start amd enabled CPU power management in the BIOS.

Overall, this seems to have fixed the regular wifi disconnections.

* DONE Streamline Org-Mode Capture: Disable Browser Prompts for Org-Protocol :emacs:orgmode:
:PROPERTIES:
:EXPORT_FILE_NAME: disable-browser-prompts-org-protocol
:EXPORT_DATE: [2025-04-07 Mon 08:00]
:END:

I use emacs org-mode to capture links from the browser for later reading, or for archiving. For this purpose, I use a simple [[https://www.gnu.org/software/emacs/manual/html_node/org/The-capture-protocol.html][bookmarklet]] to capture the link, title and any selected text, and then use an org-capture template to store the information. However, when i click on the bookmarklet, most browsers throw a pop-up asking for permission to open org-protocol:// links. This security check, while well-intentioned, adds friction every time I try to capture a link.
Here's how we can disable this confirmation prompt on Chromium based browsers.

#+hugo: more
** On macOS
#+begin_src shell
# For Google Chrome
defaults write com.google.Chrome URLAllowlist -array-add -string 'org-protocol://*'

# For Brave
defaults write com.brave.Browser URLAllowlist -array-add -string 'org-protocol://*'
#+end_src

** On Linux
We can achieve this using enterprise policy files. This however will apply to all users on the machine for this browser.
#+begin_src shell
mkdir -p /etc/opt/chrome/policies/{managed,recommended}
cat <<EOF >/etc/opt/chrome/policies/managed/allow_org_protocol.json
{
  "URLAllowlist": [
    "org-protocol:*"
  ]
}
EOF
#+end_src
The above command works for Chrome, but Brave seems to store the policies at /etc/brave/policies, so update the paths accordingly.

To debug whether policies were loaded, go to chrome://policy or brave://policy, and check logs. You can also reload policies here without having to restart chrome/brave.
* DONE Trade deficits aren't necessarily bad! :economics:
:PROPERTIES:
:EXPORT_FILE_NAME: trade-deficits-not-bad
:EXPORT_DATE: [2025-04-06 Sun 14:00]
:END:

Noah Smith [[https://www.noahpinion.blog/p/trade-deficits-do-not-make-a-country][challenges]] the common perception of trade deficits, using the credit card analogy to illustrate that they represent acquiring more goods in exchange for future financial obligations. This perspective helps us understand how South Korea, for example, leveraged trade deficits to fuel rapid industrial growth, particularly in its manufacturing sector, by importing necessary capital goods. However, the US experience with China demonstrates the potential for trade deficits to contribute to deindustrialization, as seen in the decline of American steel and textile industries. Therefore, while addressing deindustrialization is crucial, tariffs offer a simplistic and potentially harmful solution.
* DONE Mounting Synology folder share on linux :linux:
:PROPERTIES:
:EXPORT_FILE_NAME: mount-synology-on-linux
:EXPORT_DATE: [2025-04-05 Sat 17:00]
:END:

Accessing files stored on your Synology NAS directly from your Linux machine can be very convenient, whether it's for managing media libraries, accessing shared documents, or performing backups. This guide provides quick steps to mount a Synology share on Ubuntu or its derivatives (like Pop!_OS) using the CIFS protocol, ensuring it's available even after a reboot.
#+hugo: more
** Prerequisites
- On your Synology, go to Control Panel -> File Services -> SMB and check the 'Enable SMB service' option.
- On your linux machine, install CIFS Utilities
#+begin_src shell
sudo apt update
sudo apt install cifs-utils
#+end_src
- Create a mount point where the Synology share will be accessible. Let's use /mnt/nas_media as an example.
~sudo mkdir /mnt/nas_media~

** Temporary mount (for testing)
First, let's test if we can mount the share manually. This mount will not survive a reboot. Make sure to use your synology username and password in the command.

#+begin_src shell
# Find your user ID (uid) and group ID (gid) - often 1000 for the first user
id

# Mount the share
sudo mount -t cifs -o username=YourUsername,password=YourPassword,uid=1000,gid=1000 //synology_ip/Media /mnt/nas_media
#+end_src

To unmount
~sudo umount /mnt/nas_media~

** Persistent Mount
To make the mount available after a reboot, we need to add an entry in /etc/fstab. But /etc/fstab is world readable, so let's first put the credentials in a secure file.

#+begin_src shell
cat >> /root/.smbNas<<EOF
username=YourUsername
password=YourPassword
EOF

# Restrict access to the file to only root.
sudo chmod 600 /root/.smbNas
#+end_src

Now add the entry to /etc/fstab using the credentials file created above.
#+begin_src shell
//synology_ip/Media /mnt/nas_media cifs credentials=/root/.smbNas,uid=1000 0 0
#+end_src

Now trigger the mount using ~sudo mount -a~ or by rebooting the machine.
